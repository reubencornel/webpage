* Pragmatic Paranoia

The chapter starts out with, what I believe to be a very important
truth.

<b>You cannot write perfect software</b>

The best thing we can do as practitioners of our craft is to look out
for trouble before we get into in and avoid it. Sometimes as
programmers we have to think like drivers and, well program/drive
defensively. But the book goes on to say that we should really take it
one step further by protecting the code we write from our selves.

** Design by Contract

Design by contract focuses on documenting and agreeing to the rights
and responsibilities of software modules to ensure correctness. This
is based on 

<ul>
<li> Preconditions: What must be true for the routine to be called,
  that means when a routine is called its pre conditions must never be
  violated.
<li> Post conditions: What the routines is guaranteed to do
<li> Class invariants: Conditions that hold true from the perspective
  of the caller.
<ul>

<b> Design with contracts</b>


<i>Liskov substitution principle</i> says that subclasses must be
usable through the base class interface with out the need for the user
to know the difference.



* Stacks

** Description
Stacks are a dynamic data structure that operate using the LIFO
principle. More explicitly LIFO stands for "last in first out", which
in stack language translates as when someone calls a DELETE operation
on a stack the element that was most recently inserted gets deleted.

The insert on a stack is termed Push and the delete operation is
termed Pop. As an analogy consider piling books such that they are one
on top of each other, so when you do a push on this stack you place a
book on top the pile and pray that it does not topple over. When you
do a Pop the topmost book of the pile is removed.

A stack has an attribute called <i>top</i> that points to the topmost
element of the stack. When <i>top</i> is zero then the stack is
empty. 

There are two main error conditions to be concerned about when dealing
with stacks 

<ul>
  <li><b>Underflow:</b> This happens when you try to pop an element of
  the stack when the stack is empty</li>
<li><b>Overflow:</b> This happens when you push an element on to a
  already full stack</li>
</ul>

The code to implement the stack is given below, its quite self
explanatory and you can find an implementation of the same in ruby here

<div id="navCode">
0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stack-empty(s) {
<br />
1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   if s.top == 0 {
<br />
2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     return true;
<br />
3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   } else {
<br />
4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     return false;
<br />
5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br />
</div>
** Uses

* Real World Haskell

# no-toc

** Data types and stream lining functions

*** Defining new data types

Defining new data types make coding quite safe for us cause we would
not pass in incorrect data to functions. This is essentially achieved
because by defining data types we force the haskell compiler to verify
our the data types in our code.

New data types are defined using the the <code>data</code>
keyword. This expressions defines the <b>type constructor</b> and the
<b>value constructor</b>.  We refer to the data types generated by    
using the name given by its type constructor and as the name suggests
we use a value  constructor to build values. But in most code it so
happens that <i>both</i> the value and type constructors have the same name

<i>Question</i
<ol>
  <li> Firstly, why is the use of the value constructors so very
  inconsistent, because when we use plain integers, or floats we don't
  use it but we do use it for user defined types. So is that a reason
  its there because its for user defined types.
</ol>

So after reading further down I figured that, value constructors are
treated like functions. More details can be obtained using the <code>
:info</code> 

*** Type synonyms

Type synonyms are synonyms for existing data types. They serve the
purpose of making the existing code readable. They are created using
the <code> </code><tt>type</tt>

*** Algebraic Data types

Is a data type that has <b>more than one </b> value constructor. They
are separated using the "|" character.

The point of using user defined data types over standard constructs
like tuples is when we have to clarify the types we are dealing with.

Types can be used to perform the roles of equivalent features provided
by other languages like structures, enumerations, unions.

*** Pattern Matching

Haskell provides a facility by which we can define functions are
series of equations what essentially is happening here is that at
Haskell performs run time checks and applies the appropriate
definition.

**** Construction and deconstruction
